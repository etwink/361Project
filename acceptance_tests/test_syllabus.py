from django.test import TestCase
from django.test import Client

class TestSyllabus(TestCase):
    def setUp(self):
        # create clients with different access levels
        self.noCli = Client()
        self.adminCli = Client()
        self.instructorCli = Client()
        self.taCli = Client()

        # assign access levels
        self.adminCli.session["Uname"] = "admin"
        self.instructorCli.session["Uname"] = "instructor"
        self.taCli.session["Uname"] = "ta"

        self.adminCli.session.save()
        self.instructorCli.session.save()
        self.taCli.session.save()

    def test_noAccess(self):
        # someone who isn't logged in should get redirected to the login page
        access_res = self.noCli.get('/create_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/edit_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/add_class_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/add_grading_scale.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/add_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/add_calendar_entries.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/edit_class_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/edit_grading_scale.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/edit_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")
        access_res = self.noCli.get('/edit_calendar_entries.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/")

    def test_noAdminAccess(self):
        # admins should get redirected to the admin home page
        access_res = self.adminCli.get('/create_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/edit_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/add_class_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/add_grading_scale.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/add_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/add_calendar_entries.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/edit_class_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/edit_grading_scale.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/edit_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")
        access_res = self.adminCli.get('/edit_calendar_entries.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_Admin.html")

    def test_noTaAccess(self):
        # TAs should get redirected to the ta home page
        access_res = self.taCli.get('/create_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/edit_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/add_class_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/add_grading_scale.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/add_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/add_calendar_entries.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/edit_class_syllabus.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/edit_grading_scale.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/edit_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")
        access_res = self.taCli.get('/edit_calendar_entries.html')
        self.assertEqual(access_res.status_code, 302)
        self.assertEqual(access_res.url, "/home_TA.html")

    def test_yesInstructorAccess(self):
        # instructors should not get redirected
        access_res = self.instructorCli.get('/create_syllabus.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/edit_syllabus.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/add_class_syllabus.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/add_grading_scale.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/add_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/add_calendar_entries.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/edit_class_syllabus.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/edit_grading_scale.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/edit_weighted_assessment.html')
        self.assertEqual(access_res.status_code, 200)
        access_res = self.instructorCli.get('/edit_calendar_entries.html')
        self.assertEqual(access_res.status_code, 200)